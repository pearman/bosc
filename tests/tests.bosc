
'Running Tests' print ,

local :result #([name result]
  result isTrue 'PASS' 'FAIL----' + '\t' + name print) ,

; Test basic function calls
local :fun #([x]
  x < 5 isTrue ; Comment to test grammar
    $(fun (x + 1))
    x 
) ,

$(result 'Basic Function Calls' ($(fun -5) = 5)) ,

$(result 'Array Map and Comparison' (
  [1 2 3 4] 
    map #([x] x * 4 / 2) 
    isSameArrayAs [2 4 6 8])) ,

; Numerical compariters
$(result '<' (1 < 2)) ,
$(result '>' (1 > 2 = false)) ,
$(result '<=' (2 <= 2)) ,
$(result '<= (false)' (3 <= 2 = false)) ,
$(result '>=' (3 >= 2)) ,
$(result '>= (false)' (1 >= 2 = false)) ,

; Some simple iteration
$(result 'Times' (
  5 times #([x] x + 1)
    isSameArrayAs [1 2 3 4 5])) ,

; Getters 
local :x [1 2 3 4] ,
$(result 'Getters' (x ?1 = 2)) ,

; Metaprogramming
local :fun #([x] x + 5) ,
$(result 'Metaprogramming 1' ($(fun 5) = 10)) ,
fun :1 (:* toSymbol),
$(result 'Metaprogramming 2' ($(fun 5) = 25)) , 

; Nested functions
local :countdown #([x]
  x times #([y] x - y)
  push 'BOOM'
) ,
$(result 'Countdown Function' (
  $(countdown 3)
    isSameArrayAs [3 2 1 'BOOM'])) ,

; Class-like example
local :Person #([name age] {
  name name
  age age
  checkAge #([] this ?age >= 18)
}) ,

local :gabe $(Person 'Gabe ; will break?' 23) ,
local :larry $(Person 'Larry' 15) ,

; Testing comments in string? Can the grammar SURIVIVE!
$(result 'Class Lookup 1' (gabe ?name = 'Gabe ; will break?')) ,
$(result 'Class Method Call 1' (gabe checkAge = true)) ,

$(result 'Class Lookup 2' (larry ?name = 'Larry')) ,
$(result 'Class Method Call 2' (larry checkAge = false)) ,

; Testing infix functions
local :mul #([x y] x * y) ,
$(result 'Infix 1' (5 `mul` 10 = 50)) , 

local :inc #([x] x + 1) ,
$(result 'Infix 2' (5 `inc` = 6)) , 

$(result 'Merge' ({a 1} merge {b 2} = {a 1 b 2})) ,
$(result 'Concat' ([1 2] concat [3] = [1 2 3])) ,
$(result 'Join' ([1 2 3] join ' ' = '1 2 3')) ,

$(result 'Factorial' (5 ! = 120))